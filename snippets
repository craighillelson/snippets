'.source.go':
  'package main, import fmt':
    'prefix': 'main'
    'body': '''
    package main

    import (
        "fmt"
    )
    '''

  'func main':
    'prefix': 'func_main'
    'body': '''
    func main() {
    }
    '''

'.source.python':
  'doc string':
    'prefix': 'doc_string'
    'body': '""" __doc__ """'

  'import csv':
    'prefix': 'csv'
    'body': 'import csv'

  'import namedtuple':
    'prefix': 'namedtuple'
    'body': 'from collections import namedtuple'

  'import random':
    'prefix': 'random'
    'body': 'import random'

  'import re':
    'prefix': 're'
    'body': 'import re'

  'from datetime import date':
    'prefix': 'date'
    'body': 'from datetime import date'

  'from itertools import cycle':
    'prefix': 'cycle'
    'body': 'from itertools import cycle'

  'permutations':
    'prefix': 'permutations'
    'body': '''
    import itertools

    for p in itertools.permutations('abcd'): # replace 'abcd'
        print(p)
    '''

  'augmented assignment - add':
    'prefix': 'aug_add'
    'body': '+='

  'augmented assignment - subtract':
    'prefix': 'aug_sub'
    'body': '-='

  'augmented assignment - multiply':
    'prefix': 'aug_mult'
    'body': '*='

  'augmented assignment - divide':
    'prefix': 'aug_div'
    'body': '/='

  'augmented assignment - modulus':
    'prefix': 'aug_mod'
    'body': '%='

  'list - create':
    'prefix': 'list - create'
    'body': 'lst = []'

  'list - append':
    'prefix': 'list - append'
    'body': 'lst.append(a) # rename "lst" and "a"'

  'list - remove':
    'prefix': 'list - remove'
    'body': 'lst.remove(a) # rename "lst" and "a"'

  'list - insert':
    'prefix': 'list - insert'
    'body': 'lst.insert(1, item) # replace "1" with desired list index and "item" with appropriate variable'

  'list - for loop':
    'prefix': 'list_for_loop'
    'body': '''
    for x in lst: # rename variable to make it meaningful
        # process row
    '''

  'list - for loop enumerated starting at 1':
    'prefix': 'list - for loop enumerated'
    'body': '''
    for i, x in enumerate(lst, 1): # rename variable to make it meaningful
        # process row
    '''

  'list - for loop through multiple lists':
    'prefix': 'lst_for_loop_zip'
    'body': '''
    for item1, item2 in zip(LST1, LST2):
        # process row
    '''

  'list - create test list':
    'prefix': 'list - create test list'
    'body': '''
    lst = [
      \  'Gene',
      \  'Paul',
      \  'Peter',
      \  'Ace',
    ]
    '''

  'list - get index of an element in a list':
    'prefix': 'list - get index'
    'body': 'lst.index(element) # rename lst'

  'list - if in list':
    'prefix': 'list - if in'
    'body': '''
    if x in: # rename variable to make it meaningful
        # process row
    '''

  'list - if not in list':
    'prefix': 'list - if not in'
    'body': '''
    if not in x:
        # process row
    '''

  'list - group by field':
    'prefix': 'list of dictionaries - groupby'
    'body': '''
    from itertools import groupby

    rows = [
        {'member': 'Gene', 'instrument': 'bass'},
        {'member': 'Paul', 'instrument': 'guitar'},
        {'member': 'Peter', 'instrument': 'drums'},
        {'member': 'Ace', 'instrument': 'lead guitar'},
    ]

    rows.sort(key=lambda r: r['instrument'])
    for instrument, items in groupby(rows, key=lambda r: r['instrument']):
        print(instrument)
        for i in items:
            print('    ', i)
    '''

  'create empty set':
    'prefix': 'set - create'
    'body': 's = set() # rename set to make it meaningful'

  'add item to set':
    'prefix': 'set - add item'
    'body': 'set.add(\'item\') # rename \'set\' and \'item\' to make them meaningful'

  'create dictionary':
    'prefix': 'dct - create'
    'body': 'DCT = {} # make dictinary name meaningful'

  'create test dictionary':
    'prefix': 'dct - create test'
    'body': '''
    DCT = {
      \  'Gene': 'bass',
      \  'Paul': 'guitar',
      \  'Peter': 'drums',
      \  'Ace': 'lead guitar',
    }
    '''

  'delete item':
    'prefix': 'dct - delete item'
    'body': 'del DCT[key] # update DCT and key'

  'loop through dictionary enumerating items starting at 1':
    'prefix': 'dct_for_loop_enumerate'
    'body': '''
    for i, (k, v) in enumerate(DCT.items(), 1):
        print(f'{i} {k} {v}')
    '''

  'for loop dictionary':
    'prefix': 'dct - for loop'
    'body': '''
    for k, v in DCT.items(): # rename dct, keys, and values to make them meaningful
        # process row
    '''

  'compare two dictionaries':
    'prefix': 'dct - compare two dictionaries'
    'body': '''
    for (k, v), (k2, v2) in zip(DCT1.items(), DCT2.items()):
        print(f'{k} {v} - {k2} {v2}')
    '''

  'for loop indexed':
    'prefix': 'for loop - indexed'
    'body': '''
    for i in range(a, n, s): # a - start, n - stop, s - step
        # process i
    '''

  'sort dictionary by keys':
    'prefix': 'dct - sort by keys'
    'body': '''
    for k, v in sorted(DCT.items()): # rename keys and values to make them meaningful
        # process row
    '''

  'sort dictionary by values':
    'prefix': 'dct - sort by values'
    'body': '''
    for k, v in sorted(DCT.items(), key=lambda x: x[1], reverse=True): # rename keys and values to make them meaningful
        # process row
    '''

  'group dictionary by values':
    'prefix': 'dct - group by values'
    'body': '''
    DCT = {}
    DCT_GROUPED_BY_VALUES = {}

    for k, v in sorted(DCT.items()):
        DCT_GROUPED_BY_VALUES.setdefault(v, []).append(k)
    '''

  'merge dictionaries':
    'prefix': 'dct - merge dictionaries'
    'body': 'DCT3 = {**DCT1, **DCT2}'

  'create set of values comprised of the differences between two dictionaries':
    'prefix': 'set_get_diff'
    'body': 'DIFF = set(DCT1.items()) ^ set(DCT2.items())'

  'create a set comprised of the differences between two dictionaries\' keys':
    'prefix': 'dct - diff keys'
    'body': 'DCT1.keys() - DCT2.keys()'

  'create a dictionary of items common to two dictionaries':
    'prefix': 'dct - items common to two dictionaries'
    'body': 'COMMON_ITEMS = dict(DCT1.items() & DCT2.items())'

  'create set of values common to two sets':
    'prefix': 'set_items_common_to_two_sets'
    'body': '''
    set1 = {'apples', 'oranges', 'bananas'} # fruits as placeholder values
    set2 = {'bananas', 'tangerines', 'lemons'}\n
    intersection_set = set2.intersection(set1)
    '''

  'remove @ and everything after':
    'prefix': 'remove_@'
    'body': '''
    for item in lst:
        print(item[:item.find('@')])
    '''

  'return lambda':
    'prefix': 'return'
    'body': 'RTN = lambda: \'\\\\n\''

  'print return':
    'prefix': 'print_return'
    'body': 'print(RTN())'

  'get today':
    'prefix': 'today'
    'body': '''
    from datetime import date\n
    today = date.today()
    '''

  'format today':
    'prefix': 'today_format'
    'body': '''
    from datetime import date
    from datetime import datetime

    today = date.today()
    today_formatted = datetime.strftime(today, '%A %B %d, %Y')
    print(today_formatted)
    '''

  'format datetime':
    'prefix': 'datetime_format'
    'body': '''
    from datetime import datetime

    date = '9/27/19 17:01'
    date_strptime = datetime.strptime(date, '%m/%d/%y %H:%M')
    date_formatted = date_strptime.strftime('%Y-%m-%d')

    print(date_formatted)
    '''

  'format date':
    'prefix': 'date_format'
    'body': '''
    from datetime import datetime

    date = datetime.strptime('2019-09-27', '%Y-%m-%d') # '2019-09-27 is a placeholder'
    print(date.date())
    '''

  'get difference between two dates in minutes':
    'prefix': 'dates_diff_minutes'
    'body': '''
    from datetime import datetime

    FMT = '%Y-%m-%d %H:%M:%S'
    D1 = datetime.strptime('2019-01-01 10:39:30', FMT)
    D2 = datetime.strptime('2019-01-02 10:39:00', FMT)

    DIFF = D2 - D1
    DIFF_MINUTES = (DIFF.days * 24 * 60) + (DIFF.seconds/60)
    print("{:.2f}".format(DIFF_MINUTES))
    '''

  'get the difference between two dates in days':
    'prefix': 'dates_diff_days'
    'body': '''
    import datetime
    from datetime import date

    # calculate how between a given date and today
    TODAY = date.today()
    A_DATE = date(2019, 1, 1) # replace with whatever date you're working with
    DELTA = TODAY - A_DATE
    DAYS_BETWEEN = DELTA.days

    print(A_DATE)
    print(DAYS_BETWEEN)
    '''

  'get the difference between two dates in weeks':
    'prefix': 'diff_days_weeks'
    'body': '''
    import datetime
    from datetime import date

    # calculate how between a given date and today
    TODAY = date.today()
    A_DATE = date(2019, 1, 1) # replace with whatever date you're working with
    DELTA = TODAY - A_DATE
    WEEKS_BETWEEN = DELTA.days / 7

    print(A_DATE)
    print(int(WEEKS_BETWEEN))
    '''

  'open csv':
    'prefix': 'csv_open'
    'body': '''
    import csv
    from collections import namedtuple\n
    DCT = {}\n
    def open_csv(file, DCT):
    \    """ open csv and populate a dictionary with its contents """
    \    with open(file) as csv_file:
    \        F_CSV = csv.reader(csv_file)
    \        COLUMN_HEADINGS = next(F_CSV)
    \        CSV_ROW = namedtuple(\'Row\', COLUMN_HEADINGS)
    \        for rows in F_CSV:
    \            row = CSV_ROW(*rows)
    \            DCT[row.key] = row.value
    '''

  'open csv and edit headers':
    'prefix': 'csv_open_edit_headers'
    'body': '''
    with open(file) as f: # replace "file" with file name
    \    F_CSV = csv.reader(f)
    \    HEADERS = [re.sub('[^a-zA-Z_]', '_', h) for h in next(F_CSV)]
    \    ROW = namedtuple('Row', HEADERS)
    \    for r in F_CSV:
    \        row = ROW(*r)
    \        # process row
    '''

  'open csv with pandas':
    'prefix': 'pandas_csv_open'
    'body': 'df = pd.read_csv(\'data.csv\', index_col=0)'

  'write csv':
    'prefix': 'csv_write'
    'body': '''
    import csv\n
    HEADERS = # name headers\n
    def write_to_csv(name_of_file, dct):
    \    """ write dictionary to csv """
    \    with open(name_of_file, 'w') as out_file:
    \        out_csv = csv.writer(out_file)
    \        out_csv.writerow(HEADERS) # define HEADERS before running function
    \        for k, v in DCT.items(): # rename keys and values to make to make them meaningful
    \            keys_values = (k, v)
    \            out_csv.writerow(keys_values)
    '''

  'switch function':
    'prefix': 'switch_function'
    'body': '''
    def switch_case(argument):
        """ switch case statement """
        switcher = {
            'a': 'option_1',
            'b': 'option_2',
            'c': 'option_3',
            }
        return switcher.get(argument, "nothing")
    '''

  'write to text file':
    'prefix': 'write_to_txt'
    'body': '''
    FILE = open('file.txt', 'w')\n
    for item in lst:
        FILE.write(item)
    '''

  'list - generate list of random numbers':
    'prefix': 'lst_random_numbers'
    'body': '''
    import random\n
    random_numbers_lst = random.sample(range(1, 100), 3) # adapt range and number of random numbers to be generated based on the needs of your app
    '''

  'search for strings containing a specified string':
    'prefix': 'search'
    'body': 'result = re.search("dundermifflin.com", email) # replace "dundermifflin.com"'

  'validate email addresses':
    'prefix': 'validate_email_addresses'
    'body': '''
    for email in lst: # rename lst to something meaningful
    \    match = re.search(r'[\w.-]+@[\w.-]+', email)
    \    if match:
    \        print('valid')
    \    else:
    \        print('invalid')
    '''

  'check user input':
    'prefix': 'check_user_input'
    'body': '''
    while True:
        try:
            NUMBER_OF_GUESTS = int(input('How many ice cream sandwiches would '
                                         'you like? ')) # replace "ice cream sandwiches"
            if NUMBER_OF_GUESTS > 12: # replace '12'
                print('please enter a number less than or equal to twelve ')
            else:
                break
        except ValueError:
            print("Please enter an integer.")
    '''

  'format float':
    'prefix': 'format_float'
    'body': '''
    num = 22/7 # set num to any value you want
    num = float(num)
    print('{0:.2f}'.format(num))
    '''

  'word counter':
    'prefix': 'word_counter'
    'body': '''
    from collections import Counter
    words = [] # populate list
    word_counts = Counter(words)
    words_counts = word_counts.most_common() # include an integer in the most_common function to specify the number of results
    for word in words_counts:
    \    print(f"{word[0]}\t{word[1]}")
    '''

  'run python file':
    'prefix': 'run_python_file'
    'body': 'exec(open(file).read()) # rename "file"'

  'list files of a certain type in a directory':
    'prefix': 'files - list files of a certain type in a directory'
    'body': '''
    import os

    files = [file for file in os.listdir() if file.endswith('.py')] # replace '.py' with selected file type

    for i in files:
        print(i)
    '''

  'text - startswith':
    'prefix': 'text - startswith'
    'body': 'text.startswith(\'foo\') # replace \'text\' and \'foo\''

  'text - endswith':
    'prefix': 'text - endswith'
    'body': 'text.endswith(\'foo\') # replace \'text\' and \'foo\''

  'all elements in a list':
    'prefix': 'all'
    'body': 'all(lst) # replace lst'

  'any element in a list':
    'prefix': 'any'
    'body': 'any(lst) # replace lst'

  'highest value in a list':
    'prefix': 'max'
    'body': 'max(lst) # replace lst'

  'lowest value in a list':
    'prefix': 'min'
    'body': 'min(lst) # replace lst'

  'range of a list':
    'prefix': 'range'
    'body': 'min(lst), max(lst) # replace lst'

  'find mean':
    'prefix': 'mean'
    'body': '''
    import statistics
    statistics.mean([])
    '''

  'find median':
    'prefix': 'median'
    'body': '''
    import statistics
    statistics.median([])
    '''

  'find meode':
    'prefix': 'mode'
    'body': '''
    import statistics
    statistics.mode([])
    '''

'.source.html':
  'html for w3 js exercises':
    'prefix': 'html_w3'
    'body': '''
    <!DOCTYPE html>
    <html lang="${1:en}" dir="${2:ltr}">
    \t<head>
    \t\t<meta charset="utf-8">
    \t\t<title>$3</title>
    \t</head>
    \t<body>
    \t\t$4<h2>JavaScript</h2>
    \t\t<p></p>
    \t\t<script>
    \t\t</script>
    \t</body>
    </html>
    '''

'.text.plain':
  'create AWS instance':
    'prefix': 'create_aws_instance'
    'body' : '''
    # occurrences of 'xxx' are placeholders
    # replace with relevant values
    \\
    aws ec2 run-instances \\
    --image-id ami-xxx \\
    --count 1 \\
    --instance-type t2.micro \\
    --key-name xxx \\
    --security-group-ids sg-xxx \\
    --subnet-id subnet-xxx \\
    --user-data xxx.sh \\
    --tag-specifications \\
    'ResourceType=instance,Tags=[{Key=xxx,Value=xxx}]'
    'ResourceType=volume,Tags=[{Key=xxx,Value=xxx}]'
    '''
