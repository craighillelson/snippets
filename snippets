'.source.go':
  'package main, import fmt':
    'prefix': 'main'
    'body': '''
    package main

    import (
        "fmt"
    )
    '''

  'func main':
    'prefix': 'func_main'
    'body': '''
    func main() {
    }
    '''

'.source.python':
  'doc string':
    'prefix': 'doc'
    'body': '""" __doc__ """'

  'concatenate strings':
    'prefix': 'str - concatenate'
    'body': '''
    def concat_str(a, b):
        """Concatenate strings."""
        return a + b
    '''

  'find string regardless of case':
    'prefix': 'str - find match regardless of case'
    'body':'''
    def find_match_ignore_case(TEXT, TEXT_TO_FIND):
        """Find text matches in a string, regardless of case."""
        import re
        return re.findall(TEXT, TEXT_TO_FIND, flags=re.IGNORECASE)
    '''

  'import namedtuple':
    'prefix': 'namedtuple'
    'body': 'from collections import namedtuple'

  'import random':
    'prefix': 'random'
    'body': 'import random'

  'import re':
    'prefix': 're'
    'body': 'import re'

  'from datetime import date':
    'prefix': 'date'
    'body': 'from datetime import date'

  'find last friday\'s date':
    'prefix': 'last friday'
    'body': '''
    from datetime import datetime
    from datetime import timedelta

    weekdays = ['Monday', 'Tuesday', 'Wendesday', 'Thursday', 'Friday',
                'Saturday', 'Sunday']

    def get_previous_by_day(dayname, start_date=None):
        if start_date is None:
            start_date = datetime.today()
        day_num = start_date.weekday()
        day_num_target = weekdays.index(dayname)
        days_ago = (7 + day_num - day_num_target) % 7
        if days_ago == 0:
            days_ago = 7
        target_date = start_date - timedelta(days=days_ago)
        return target_date
    '''

  'from itertools import cycle':
    'prefix': 'cycle'
    'body': 'from itertools import cycle'

  'find all permutations of a string':
    'prefix': 'str - permutations'
    'body': '''
    def permutations(a):
        """Make a list of all permutations of a string."""
        import itertools

        lst = []

        for i in itertools.permutations(a):
            lst.append(i)

        return lst
    '''

  'augmented assignment - add':
    'prefix': 'add'
    'body': '+='

  'augmented assignment - subtract':
    'prefix': 'subtract'
    'body': '-='

  'augmented assignment - multiply':
    'prefix': 'multiply'
    'body': '*='

  'augmented assignment - divide':
    'prefix': 'divide'
    'body': '/='

  'augmented assignment - modulus':
    'prefix': 'modulus'
    'body': '%='

  'create list':
    'prefix': 'list - create'
    'body': 'lst = []'

  'append list':
    'prefix': 'list - append'
    'body': 'lst.append(a) # rename "lst" and "a"'

  'remove':
    'prefix': 'list - remove'
    'body': '''
    def remove_from_list(lst, a):
        """Remove an item from a list."""
        lst.remove(a) # rename "lst" and "a"
        return lst
    '''

  'insert':
    'prefix': 'list - insert'
    'body': 'lst.insert(1, item) # replace "1" with desired list index and "item" with appropriate variable'

  'iterate through list':
    'prefix': 'list - iterate'
    'body': '''
    for x in lst: # rename variable to make it meaningful
        # process row
    '''

  'iterate in reverse':
    'prefix': 'list - iterate in reverse'
    'body': '''
    for x in reversed(lst): # rename variable to make it meaningful
        # process row
    '''

  'enumerated for loop starting at 1':
    'prefix': 'list - output enumerated for loop'
    'body': '''
    def output_enumerated_list(lst):
        for i, j in enumerate(lst, 1): # rename variable to make it meaningful
            print(i, j) # process row
    '''

  'zip lists':
    'prefix': 'lists - zip'
    'body': '''
    def zip_lists(a, b):
        """Zip lists and return a combined list."""
        lst = []
        for item1, item2 in zip(a, b):
            item = item1, item2
            lst.append(item)

        return lst
    '''

  'create test list':
    'prefix': 'list - create test list'
    'body': '''
    lst = [
    \    'Gene',
    \    'Paul',
    \    'Peter',
    \    'Ace',
    ]
    '''

  'get index of an element in a list':
    'prefix': 'list - get index'
    'body': 'lst.index(element) # rename lst'

  'if variable in list':
    'prefix': 'list - if in'
    'body': '''
    if x in: # rename variable to make it meaningful
        # process row
    '''

  'if variable not in list':
    'prefix': 'list - if not in'
    'body': '''
    if x not in lst:
        # process row
    '''

  'list - list of dictionaries - groupby':
    'prefix': 'list - groupby'
    'body': '''
    from itertools import groupby

    rows = [
        {'member': 'Gene', 'instrument': 'bass'},
        {'member': 'Paul', 'instrument': 'guitar'},
        {'member': 'Peter', 'instrument': 'drums'},
        {'member': 'Ace', 'instrument': 'lead guitar'},
    ]

    rows.sort(key=lambda r: r['instrument'])
    for instrument, items in groupby(rows, key=lambda r: r['instrument']):
        print(instrument)
        for i in items:
            print('    ', i)
    '''

  'iterate through a list and apply a conditional statement to each item':
    'prefix': 'list - iterate and test'
    'body': '''
    for word in word_list:
        if # condition:
            print('valid')
        else:
            print('invalid')
    '''

  'create empty set':
    'prefix': 'set - create'
    'body': 's = set() # rename set to make it meaningful'

  'add item to set':
    'prefix': 'set - add item'
    'body': 'set.add(\'item\') # rename \'set\' and \'item\' to make them meaningful'

  'create dictionary':
    'prefix': 'dct - create'
    'body': 'DCT = {} # make dictinary name meaningful'

  'create test dictionary':
    'prefix': 'dct - create test dictionary'
    'body': '''
    DCT = {
    \    'Gene': 'bass',
    \    'Paul': 'guitar',
    \    'Peter': 'drums',
    \    'Ace': 'lead guitar',
    }
    '''

  'delete item':
    'prefix': 'dct - delete item'
    'body': 'del DCT[key] # update DCT and key'

  'loop through dictionary enumerating items starting at 1':
    'prefix': 'dct - enumerated'
    'body': '''
    for i, (k, v) in enumerate(DCT.items(), 1):
        print(f'{i} {k} {v}')
    '''

  'for loop dictionary':
    'prefix': 'dct - for loop'
    'body': '''
    for k, v in DCT.items(): # rename dct, keys, and values to make them meaningful
        # process row
    '''

  'compare two dictionaries':
    'prefix': 'dct - compare two dictionaries'
    'body': '''
    for (k, v), (k2, v2) in zip(DCT1.items(), DCT2.items()):
        print(f'{k} {v} - {k2} {v2}')
    '''

  'for loop indexed':
    'prefix': 'for loop - indexed'
    'body': '''
    for i in range(a, n, s): # a - start, n - stop, s - step
        # process i
    '''

  'sort dictionary by keys':
    'prefix': 'dct - sort by keys'
    'body': '''
    for k, v in sorted(DCT.items()): # rename keys and values to make them meaningful
        # process row
    '''

  'sort dictionary by values':
    'prefix': 'dct - sort by values'
    'body': '''
    for k, v in sorted(DCT.items(), key=lambda x: x[1], reverse=True): # rename keys and values to make them meaningful
        # process row
    '''

  'group dictionary by values':
    'prefix': 'dct - group by values'
    'body': '''
    DCT = {}
    DCT_GROUPED_BY_VALUES = {}

    for k, v in sorted(DCT.items()):
        DCT_GROUPED_BY_VALUES.setdefault(v, []).append(k)
    '''

  'merge dictionaries':
    'prefix': 'dct - merge dictionaries'
    'body': 'DCT3 = {**DCT1, **DCT2}'

  'create set of values comprised of the differences between two dictionaries':
    'prefix': 'set - get diff'
    'body': 'DIFF = set(DCT1.items()) ^ set(DCT2.items())'

  'create a set comprised of the differences between two dictionaries\' keys':
    'prefix': 'dct - diff keys'
    'body': 'DCT1.keys() - DCT2.keys()'

  'create a dictionary of items common to two dictionaries':
    'prefix': 'dct - items common to two dictionaries'
    'body': 'COMMON_ITEMS = dict(DCT1.items() & DCT2.items())'

  'create set of values common to two sets':
    'prefix': 'set_items_common_to_two_sets'
    'body': '''
    set1 = {'apples', 'oranges', 'bananas'} # fruits as placeholder values
    set2 = {'bananas', 'tangerines', 'lemons'}\n
    intersection_set = set2.intersection(set1)
    '''

  'turn a list of tuples into dictinary':
    'prefix': 'tuples to dict'
    'body': '''
    def tuple_to_dct():
        """
        Create a dictionary from a list of tuples, making the first elements the
        keys and the second elements the values.
        """
        for x, y in lst:
            dct.setdefault(x, []).append(y)

        return dct
    '''

  'return lambda':
    'prefix': 'lambda return'
    'body': 'RTN = lambda: \'\\\\n\''

  'print return':
    'prefix': 'print'
    'body': 'print(RTN())'

  'string to date':
    'prefix': 'convert string to date'
    'body': '''
    def string_to_date(a):
        """Convert string to date object."""
        from datetime import datetime

        date_time = a
        date_strptime = datetime.strptime(date_time, '%Y-%m-%d %H:%M')
        return date_strptime.date()
    '''

  'yesterday YYYY-MM-DD':
    'prefix': 'get yesterday\'s date'
    'body': '''
    def get_yesterday():
        """Get yesterday's date."""
        from datetime import datetime
        from datetime import timedelta

        return str(datetime.strftime(datetime.now() - timedelta(1), '%Y-%m-%d'))
    '''

  'today YYYY-MM-DD':
    'prefix': 'today YYYY-MM-DD'
    'body': '''
    from datetime import date

    today = date.today() # yields today's date in YYYY-MM-DD format
    '''

  'today - Day, Month d, YYYY':
    'prefix': 'today Month d, YYYY'
    'body': '''
    def date_format_day_m_d_y(a):
        """Format date as '%A, %B %d, %Y'."""
        from datetime import date
        from datetime import datetime

        return datetime.strftime(a, '%A, %B %d, %Y')
    '''

  'format string as datetime object in YYYY-MM-DD format':
    'prefix': 'datetime format'
    'body': '''
    def datetime_format(a, b):
        """Format string as datetime object."""
        from datetime import datetime

        date_strptime = datetime.strptime(a, b) # date string, format
        return date_strptime.date()
    '''

  'get difference between two dates in minutes':
    'prefix': 'dates diff minutes'
    'body': '''
    def diff_dates_minutes(a, b):
        """Get the differece in minutes between two datetime objects."""
        from datetime import datetime

        FMT = '%Y-%m-%d %H:%M:%S'
        D1 = datetime.strptime(a, FMT)
        D2 = datetime.strptime(b, FMT)
        DIFF = D2 - D1

        return '{:.2f}'.format((DIFF.days * 24 * 60) + (DIFF.seconds/60))
    '''

  'get the difference between two dates in days':
    'prefix': 'dates diff days'
    'body': '''
    def diff_days_from_today(a):
        """Get the difference in days between a user specified date and today's
         date."""
        import datetime
        from datetime import date

        TODAY = date.today()
        DELTA = TODAY - a
        if DELTA.days > 0:
            return str(DELTA.days) + ' ago'
        else:
            return str(DELTA.days * -1) + ' from now'
    '''

  'get the difference between two dates in weeks':
    'prefix': 'dates diff weeks'
    'body': '''
    import datetime
    from datetime import date

    # calculate how between a given date and today
    TODAY = date.today()
    A_DATE = date(2019, 1, 1) # replace with whatever date you're working with
    DELTA = TODAY - A_DATE
    WEEKS_BETWEEN = DELTA.days / 7

    print(A_DATE)
    print(int(WEEKS_BETWEEN))
    '''

  'test to see if user input is in YYYY-MM-DD format':
    'prefix': 'date regex YYYY-MM-DD'
    'body': '''
    def is_date(text):
        """Test to see if user input is in YYYY-MM-DD format."""
        if len(text) != 10:
            return False
        for i in range(0, 4):
            if not text[i].isdecimal():
                return False
        if text[4] != '-':
            return False
        for i in range(5, 7):
            if not text[i].isdecimal():
                return False
        if text[7] != '-':
            return False
        for i in range(8, 10):
            if not text[i].isdecimal():
                return False
        return True


    while True:
        print('please enter a date in YYYY-MM-DD format')
        usr_date = input('> ')
        if is_date(usr_date) == True:
            print('thank you')
            break
        else:
            pass
    '''

  'open csv':
    'prefix': 'csv open namedtuple'
    'body': '''
    def open_csv_pop_dct_namedtuple(file_name):
        """Open a csv and populate a dictionary."""
        from collections import namedtuple

        dct = {}

        with open(file_name) as f:
            f_csv = csv.reader(f)
            headings = next(f_csv)
            Row = namedtuple('Row', headings)
            for r in f_csv:
                row = Row(*r)
                dct[row.key] = row.value # replace 'key' and 'value' with header names

        return dct
    '''

  'open csv DictReader':
    'prefix': 'csv open with DictReader'
    'body': '''
    def open_csv_pop_dct(file, a, b):
    """Open csv and populate a dictionary with its contents."""
        import csv

        DCT = {}

        with open(file, newline='') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                DCT[row[a]] = row[b]

        return DCT
    '''

  'open csv edit headers':
    'prefix': 'csv open edit headers'
    'body': '''
    import csv
    with open(file) as f: # replace "file" with file name
    \    F_CSV = csv.reader(f)
    \    HEADERS = [re.sub('[^a-zA-Z_]', '_', h) for h in next(F_CSV)]
    \    ROW = namedtuple('Row', HEADERS)
    \    for r in F_CSV:
    \        row = ROW(*r)
    \        # process row
    '''

  'json read':
    'prefix': 'read json data'
    'body': '''
    def read_json(a):
        """Read JSON data."""
        with open(a) as f:
            return json.load(f)
    '''

  'json write':
    'prefix': 'write json data'
    'body': '''
    def write_json(a, b):
        """Write JSON data."""
        with open(a, 'w') as f:
        json.dump(b, f)
    '''

  'open csv with pandas':
    'prefix': 'csv open with pandas'
    'body': '''
    import pandas as pd

    df = pd.read_csv(\'data.csv\', index_col=0) # 'data.csv' is a placeholder
    '''

  'write dictionary csv':
    'prefix': 'csv write dictionary to csv'
    'body': '''
    def write_dct_to_csv(file, DCT, HEADERS):
        """Write dictionary to csv."""
        import csv

        with open(file, 'w') as out_file:
            out_csv = csv.writer(out_file)
            out_csv.writerow(HEADERS)
            for k, v in DCT.items():
                keys_values = (k, v) # rename keys and values to make to make them meaningful
                out_csv.writerow(keys_values)

        print(f'"{file}" exported successfully')
    '''

  'write list csv':
    'prefix': 'csv write list to csv'
    'body': '''
    def write_lst_to_csv(file, LST, HEADER):
        """Write list to csv """
        import csv

        with open(file, 'w') as out_file:
            out_csv = csv.writer(out_file)
            out_csv.writerow(HEADER)
            for i in LST: # rename i to make it meaningful
                out_csv.writerow([i])

            print(f'"{file}" exported successfully')
    '''

  'switch function':
    'prefix': 'switch'
    'body': '''
    def switch_case(argument):
        """Switch case statement."""
        switcher = {
            'a': 'option_1',
            'b': 'option_2',
            'c': 'option_3',
            }
        return switcher.get(argument, 'nothing')
    '''

  'write to text file':
    'prefix': 'text file'
    'body': '''
    FILE = open('file.txt', 'w')\n
    for item in lst:
        FILE.write(item)
    '''

  'generate a list of random numbers':
    'prefix': 'list - random'
    'body': '''
    def generate_list_of_random_numbers():
        """Generate a list of random numbers within specifiied paramaters."""
        import random

        return random.sample(range(1, 100), 3) # adapt range and number of random numbers to be generated based on the needs of your app
    '''

  'search for strings containing a specified string':
    'prefix': 'search'
    'body': '''
    domain = 'dundermifflin.com'
    email = 'dwight@dundermifflin.com'
    if 'dundermifflin.com' in email:
        print(f'contains {domain}')
    else:
        print(f'does not contain {domain}')
    '''

  'validate email addresses':
    'prefix': 'validate_email_addresses'
    'body': '''
    for email in lst: # rename lst to something meaningful
    \    match = re.search(r'[\w.-]+@[\w.-]+', email)
    \    if match:
    \        print('valid')
    \    else:
    \        print('invalid')
    '''

  'get domain name from an email address':
    'prefix': 'domain'
    'body': '''
    def get_domain(email_adddress):
        """Extract domain from email address."""
        return email_adddress.split('@')[1]
    '''

  'get username from an email address':
    'prefix': 'username'
    'body': '''
    def get_email_prefix(email_adddress):
        """ """
        return email_adddress.split('@')[0]
    '''

  'prompt user for the number of most frequently occurring items they\'d like to see':
    'prefix': 'prompt user'
    'body': '''
    def prompt_user_for_number():
        """
        Prompt user for the number of most frequently occurring items
        they'd like to see, validating that they input an integer.
        """
        import pyinputplus as pyip

        print("Enter the number of most frequently occurring items you'd like "
              "to see.")
        return pyip.inputInt(prompt="> ")
    '''

  'check user input':
    'prefix': 'check_user_input'
    'body': '''
    while True:
        try:
            NUMBER_OF_GUESTS = int(input('How many ice cream sandwiches would '
                                         'you like? ')) # replace "ice cream sandwiches"
            if NUMBER_OF_GUESTS > 12: # replace '12'
                print('please enter a number less than or equal to twelve ')
            else:
                break
        except ValueError:
            print("Please enter an integer.")
    '''

  'format a number as a float':
    'prefix': 'format float'
    'body': '''
    num = 22/7 # set num to any value you want
    num = float(num)
    print('{0:.2f}'.format(num))
    '''

  'format to include thousands separator':
    'prefix': 'format thousands separator'
    'body': '''
    num = 1234.567 # replace 1234.567
    num_fmt = format(x,  '0,.1f')
    print(num_fmt)
    '''

  'format as a percentage':
    'prefix': 'format percentage'
    'body': '''
    def format_percentage(num, total):
        """Format percentage to the second decimal place."""
        perc = num / total
        return '{:.2%}'.format(perc)
    '''

  'count occurrences of a word in a list':
    'prefix': 'word counter'
    'body': '''
    from collections import Counter

    words = [] # populate list
    word_counts = Counter(words)
    words_counts = word_counts.most_common() # include an integer in the most_common function to specify the number of results

    for word in words_counts:
    \    print(f'{word[0]} - {word[1]}')
    '''

  'run python file':
    'prefix': 'run_python_file'
    'body': 'exec(open(file).read()) # rename "file"'

  'list files of a certain type in a directory':
    'prefix': 'files - list files of a certain type in a directory'
    'body': '''
    import os

    files = [file for file in os.listdir() if file.endswith('.py')] # replace '.py' with selected file type

    for i in files:
        print(i)
    '''

  'string starts with':
    'prefix': 'startswith'
    'body': 'text.startswith(\'foo\') # replace \'text\' and \'foo\''

  'string ends with':
    'prefix': 'endswith'
    'body': 'text.endswith(\'foo\') # replace \'text\' and \'foo\''

  'all elements in a list':
    'prefix': 'all'
    'body': 'all(lst) # replace lst'

  'any element in a list':
    'prefix': 'any'
    'body': 'any(lst) # replace lst'

  'find highest value in a list':
    'prefix': 'max'
    'body': 'max(lst) # replace lst'

  'find lowest value in a list':
    'prefix': 'min'
    'body': 'min(lst) # replace lst'

  'range of a list':
    'prefix': 'range'
    'body': '''
    def find_range(lst):
        """Find the range in a list of numbers."""
        return min(lst), max(lst) # replace lst'
    '''

  'find mean':
    'prefix': 'mean'
    'body': '''
    import statistics
    statistics.mean([])
    '''

  'find median':
    'prefix': 'median'
    'body': '''
    import statistics
    statistics.median([])
    '''

  'find mode':
    'prefix': 'mode'
    'body': '''
    import statistics
    statistics.mode([])
    '''

  'find standard deviation':
    'prefix': 'standard deviation'
    'body': '''
    import statistics
    statistics.stdev([])
    '''

  'create ec2':
    'prefix': 'create ec2'
    'body': '''
    import os
    import boto3

    AMI = os.environ['AMI']
    INSTANCE_TYPE = os.environ['INSTANCE_TYPE']
    KEY_NAME = os.environ['KEY_NAME']
    SUBNET_ID = os.environ['SUBNET_ID']

    ec2 = boto3.resource('ec2')

    def lambda_handler(event, context):

        instance = ec2.create_instances(
            ImageId=AMI,
            InstanceType=INSTANCE_TYPE,
            KeyName=KEY_NAME,
            SubnetId=SUBNET_ID,
            MaxCount=1,
            MinCount=1
        )

        print("New instance created:", instance[0].id)

      '''

'.source.html':
  'html for w3 js exercises':
    'prefix': 'html_w3'
    'body': '''
    <!DOCTYPE html>
    <html lang="${1:en}" dir="${2:ltr}">
    \t<head>
    \t\t<meta charset="utf-8">
    \t\t<title>$3</title>
    \t</head>
    \t<body>
    \t\t$4<h2>JavaScript</h2>
    \t\t<p></p>
    \t\t<script>
    \t\t</script>
    \t</body>
    </html>
    '''

'.text.plain':
  'create AWS instance':
    'prefix': 'create_aws_instance'
    'body' : '''
    # replace 'xxx' with relevant values
    \\
    aws ec2 run-instances \\
    --image-id ami-xxx \\
    --count 1 \\
    --instance-type t2.micro \\
    --key-name xxx \\
    --security-group-ids sg-xxx \\
    --subnet-id subnet-xxx \\
    --user-data xxx.sh \\
    --tag-specifications \\
    'ResourceType=instance,Tags=[{Key=xxx,Value=xxx}]'
    'ResourceType=volume,Tags=[{Key=xxx,Value=xxx}]'
    '''

  'create vpc':
    'prefix': 'create vpc'
    'body': 'aws ec2 create-vpc --cidr-block {172.16.0.0/16}'

  'output table of amis':
    'prefix': 'output table of amis'
    'body': '''
    aws --output table ec2 describe-images \
    --filters "Name=description,Values=*Amazon Linux 2*" \
    "Name=owner-alias,Values=amazon"
    '''

  'copy a file to s3':
    'prefix': 's3 copy file'
    'body': 'aws s3 cp {filename} {bucket}'

  'create a presigned url':
    'prefix': 's3 presigned'
    'body': 'aws s3 presign s3://{my_bucket_name/private_object} --expires-in 600'
