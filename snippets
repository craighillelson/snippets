'.source.go':
  'package main, func main':
    'prefix': 'main'
    'body': '''
    package main

    func main() {

    }
    '''

  'output time':
    'prefix': 'time - output time'
    'body': '''
    import (
        "fmt"
        "time"
    )

    func main() {
        fmt.Println(time.Now())
    }
    '''

  'for loop':
    'prefix': 'for loop'
    'body': '''
    package main

    import "fmt"

    func main() {
        sum := 0
        for i := 0; i < 10; i++ {
            sum += i
        }
        fmt.Println(sum)
    }
    '''

'.source.python':
  'doc string':
    'prefix': 'doc'
    'body': '"""__doc__"""'

  'single condition':
    'prefix': 'condition - single'
    'body': '''
    if : # include condition before colon
        # code to execute
    else:
        # code to execute
    '''

  'multiple conditions':
    'prefix': 'conditions - multiple'
    'body': '''
    if : # include condition before colon
        # code to execute
    elif : # include condition before colon
        # code to execute
    else:
        # code to execute
    '''

  'concatenate strings':
    'prefix': 'str - concatenate'
    'body': '''
    def concatenate_strings(a, b):
        return a + b
    '''

  'find string regardless of case':
    'prefix': 'str - find match regardless of case'
    'body':'''
    import re
    def find_text_matches_ignore_case(TEXT, TEXT_TO_FIND):
        return re.findall(TEXT, TEXT_TO_FIND, flags=re.IGNORECASE)
    '''

  'replace text':
    'prefix': 'str - replace text in a string'
    'body': '"Peter Criss".replace("Peter Criss", "Eric Carr")'

  'find all permutations of a string':
    'prefix': 'str - permutations'
    'body': '''
    import itertools

    def permutations(a_string):
        lst = []

        for i in itertools.permutations(a_string):
            lst.append(i)

        return lst
    '''

  'import US holidays, requires https://pypi.org/project/holidays/':
    'prefix': 'dates - holidays'
    'body': '''
    from datetime import date
    import holidays

    today = date.today()
    us_holidays = holidays.US()

    if today in us_holidays:
        print('holiday')
    else:
        print('not a holiday')
    '''

  'get day of the week for a given day':
    'prefix': 'dates - day of week'
    'body': '''
    def convert_date_to_days(date):
        days = (
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
            )
        return day[date.weekday()]
    '''

  'get number of weekdays between two dates':
    'prefix': 'dates - number of weekdays'
    'body': '''
    import datetime
    from collections import Counter


    def assemble_list_of_days():
        weekdays = (
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
            )

        lst = []

        for num in range((end_date - start_date).days + 1):
            date = start_date + datetime.timedelta(num)
            day_index = date.weekday()
            day = weekdays[day_index]
            lst.append(day)

        return lst


    def output_results(start, end):
        print(f"\\\\nnumber of weekdays between {start} and {end}")
        for day, count in sorted(days_count.items(), key=lambda x: x[1], \\\\
                                 reverse=True):
            print(day, count)
        print("\\\\n")


    start_date = datetime.date(2021,6,1)
    end_date = datetime.date(2021,6,30)
    days = assemble_list_of_days()
    days_count = dict(Counter(days))
    output_results(start_date, end_date)
    '''

  'checks to see if is today is a weekday or a weekend day':
    'prefix': 'dates - weekend'
    'body': '''
    import datetime

    def determine_if_today_is_a_weekend_day():
        day_index = datetime.datetime.today().weekday()
        if day_index > 4:
            return "weekend"
        else:
            return "not a weekend"
    '''

  'get last friday\'s date':
    'prefix': 'dates - last friday'
    'body': '''
    from datetime import (datetime,
                          timedelta)

    weekdays = (
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
        'Sunday'
    )

    def get_previous_by_day(dayname, start_date=None):
        """Find last Friday's date."""
        if start_date is None:
            start_date = datetime.today()
        day_num = start_date.weekday()
        day_num_target = weekdays.index(dayname)
        days_ago = (7 + day_num - day_num_target) % 7
        if days_ago == 0:
            days_ago = 7
        target_date = start_date - timedelta(days=days_ago)
        return target_date
    '''

  'determine the date a given number of days from  today\'s date':
    'prefix': 'dates - days from now'
    'body': '''
    import datetime

    def days_from_now(a):
        start_date = datetime.datetime.now() + datetime.timedelta(a)
        return start_date.date()
    '''

  'sort list':
    'prefix': 'lst - sort'
    'body': 'lst.sort()'

  'sort list reverse':
    'prefix': 'lst - sort reverse'
    'body': 'lst.sort(reverse=True)'

  'shuffle list':
    'prefix': 'lst - shuffle'
    'body': '''
    import random

    lst = # populate list
    lst.random(lst)
    '''

  'append list':
    'prefix': 'lst - append'
    'body': 'lst.append(a) # rename "lst" and "a"'

  'remove from list':
    'prefix': 'lst - remove'
    'body': '''
    def remove_from_list(lst, a):
        """Remove an item from a list."""
        lst.remove(a) # rename "lst" and "a"
        return lst
    '''

  'insert item into list':
    'prefix': 'lst - insert'
    'body': '''
    lst.insert(1, item) # replace "1" with desired list index and "item" with appropriate variable
    '''

  'extend a list by appending a second list':
    'prefix': 'lst - extend'
    'body': '''
    lst1.extend(lst2)
    '''

  'extend list excluding dupicates':
    'prefix': 'lst - extend, no duplicates'
    'body': '''
    lst1.extend(i for i in lst2 if i not in lst1)
    '''

  'list comp - replace spaces':
    'prefix': 'replace spaces with underscores'
    'body': '''
    import os
    lst = [os.rename(filename, filename.replace(" ", "_").lower()) for \
           filename in os.listdir(".") if not filename.startswith(".")]
    '''

  'populate a list containing elements in the first list excluding the elements that are in both lists':
    'prefix': 'lst - diffs one way'
    'body': 'lst3 = [item for item in lst1 if not item in lst2]'

  'iterate through list':
    'prefix': 'lst - iterate'
    'body': '''
    for i in lst: # rename variable to make it meaningful
        # process row
    '''

  'iterate through sorted list':
    'prefix': 'lst - iterate sorted'
    'body': '''
    for i in sorted(lst): # rename variable to make it meaningful
        # process row
    '''

  'iterate in reverse':
    'prefix': 'lst - iterate in reverse'
    'body': '''
    for x in reversed(lst): # rename variable to make it meaningful
        # process row
    '''

  'enumerate for loop starting at 1':
    'prefix': 'lst - output enumerated for loop'
    'body': '''
    def output_enumerated_list(lst):
        for num, j in enumerate(lst, 1): # rename variable to make it meaningful
            print(num, j) # process row
    '''

  'convert elements in a list to a string separated by commas':
    'prefix': 'lst - convert to string'
    'body': '''
    lst = [] # populate list
    ", ".join(map(str, lst))
    '''

  'print header and elements of a list on the same line':
    'prefix': 'lst - print elements on the same line'
    'body': '''
    print('kiss - original members:', end=' ')
    print(*lst, sep=', '')
    '''

  'zip lists':
    'prefix': 'lst - zip'
    'body': '''
    def zip_lists(a, b):
        """zip lists and return a combined list."""
        lst = []
        for item1, item2 in zip(a, b):
            item = item1, item2
            lst.append(item)

        return lst
    '''

  'zip lists longest':
    'prefix': 'lst - zip longest'
    'body': '''
    from itertools import zip_longest
    lst1 = []
    lst2 = []
    for i in zip_longest(lst1, lst2):
        print(i)
    '''

  'create empty list':
    'prefix': 'lst'
    'body': 'lst = [] #rename lst to make it meaningful'

  'create test list':
    'prefix': 'lst - test'
    'body': '''
    lst = [
        'Gene',
        'Paul',
        'Peter',
        'Ace',
    ]
    '''

  'get index of an element in a list':
    'prefix': 'lst - get index'
    'body': 'lst.index(element) # rename lst'

  'if variable in list':
    'prefix': 'lst - if in'
    'body': '''
    if x in lst: # rename x and lst to make them meaningful
        # process row
    '''

  'if variable not in list':
    'prefix': 'lst - if not in'
    'body': '''
    if x not in lst: # rename x and lst to make them meaningful
        # process row
    '''

  'list - list of dictionaries - groupby':
    'prefix': 'lst - groupby'
    'body': '''
    from itertools import groupby

    rows = [
        {'member': 'Gene', 'instrument': 'bass'},
        {'member': 'Paul', 'instrument': 'guitar'},
        {'member': 'Peter', 'instrument': 'drums'},
        {'member': 'Ace', 'instrument': 'lead guitar'},
    ]

    rows.sort(key=lambda r: r['instrument'])
    for instrument, items in groupby(rows, key=lambda r: r['instrument']):
        print(instrument)
        for i in items:
            print('    ', i)
    '''

  'iterate through a list and apply a conditional statement to each item':
    'prefix': 'lst - iterate and test'
    'body': '''
    for word in word_list:
        if # condition:
            print('valid')
        else:
            print('invalid')
    '''

  'list comprehension replacing spaces with underscores':
    'prefix': 'lst - replace spaces'
    'body': '''
    import re

    def replace_spaces_with_underscores(lst):
        return [re.sub("[^a-zA-Z_]", "_", element) for element in lst]
    '''

  'create empty set':
    'prefix': 'set - create'
    'body': 's = set() # rename s to make it meaningful'

  'add item to set':
    'prefix': 'set - add item'
    'body': '''
    set.add(\'item\') # rename \'set\' and \'item\' to make them meaningful'
    '''

  'diff two sets':
    'prefix': 'set - diff'
    'body': '''
    set_a.difference(set_b)
    '''


  'create dictionary from list of lists':
    'prefix': 'dct - create dct from lists'
    'body': '''
    def convert_lists_to_dictionary(lst):
        dct = {}
        for i in range(0, len(lst), 4): # start, end, step
            dct[lst[i]] = lst[int(i + 1): int(i + 4)]

        return dct
    '''

  'create empty dictionary':
    'prefix': 'dct - create'
    'body': 'dct = {} # make dictinary name meaningful'

  'get list of dictionary keys':
    'prefix': 'dct - get dictionary keys'
    'body': 'lst = list(dct.keys())'

  'get list of dictionary values':
    'prefix': 'dct - get dictionary values'
    'body': 'lst = list(dct.values())'

  'create test dictionary':
    'prefix': 'dct - create test dictionary'
    'body': '''
    dct = {
        'Gene': 'bass',
        'Paul': 'guitar',
        'Peter': 'drums',
        'Ace': 'lead guitar',
    }
    '''

  'delete item':
    'prefix': 'dct - delete item'
    'body': 'del dct[key] # update dct and key'

  'loop through dictionary enumerating items starting at 1':
    'prefix': 'dct - enumerated'
    'body': '''
    for num, (k, v) in enumerate(dct.items(), 1):
        print(f'{num} {k} {v}')
    '''

  'update dictionary':
    'prefix': 'dct - update dct'
    'body': '''
    dct1 = {'gene': 'bass'} # placeholder
    dct2 = {'paul': 'guitar'} # placeholder

    dct1.update(dct2)
    '''

  'loop through items in a dictionary':
    'prefix': 'dct - for loop'
    'body': '''
    for k, v in dct.items(): # rename dct, keys, and values to make them meaningful
        # process row
    '''

  'compare two dictionaries':
    'prefix': 'dct - compare two dictionaries'
    'body': '''
    for (k, v), (k2, v2) in zip(dct1.items(), dct2.items()):
        print(f'{k} {v} - {k2} {v2}')
    '''

  'combine values as lists':
      'prefix': 'dct - combine values as lists where keys are common to both dictionaries'
      'body': '''
      def combine_values_as_lists_where_keys_are_common_to_both_dictionaries():
          dct3 = {**dct1, **dct2}
          for k, v in dct3.items():
              if k in dct1 and k in dct2:
                  dct3[k] = [dct1[k], v]
              else:
                  dct3[k] = [v]

          return dct3
    '''

  'for loop indexed':
    'prefix': 'lst - indexed for loop'
    'body': '''
    for i in range(a, n, s): # a - start, n - stop, s - step
        # process i
    '''

  'sort dictionary by keys':
    'prefix': 'dct - sort by keys'
    'body': '''
    for k, v in sorted(dct.items()): # rename keys and values to make them meaningful
        # process row
    '''

  'sort dictionary by values':
    'prefix': 'dct - sort by values'
    'body': '''
    for k, v in sorted(dct.items(), key=lambda x: x[1], reverse=True): # rename keys and values to make them meaningful
        # process row
    '''

  'group dictionary by values':
    'prefix': 'dct - group by values'
    'body': '''
    dct = {}
    dct_grouped_by_values = {}

    for k, v in sorted(dct.items()):
        dct_grouped_by_values.setdefault(v, []).append(k)
    '''

  'merge dictionaries':
    'prefix': 'dct - merge dictionaries'
    'body': 'dct3 = {**dct1, **dct2}'

  'create set of values comprised of the differences between two dictionaries':
    'prefix': 'set - get diff'
    'body': 'diff = set(dct1.items()) ^ set(dct2.items())'

  'create a set comprised of the differences between two dictionaries\' keys':
    'prefix': 'dct - diff keys'
    'body': 'dct1.keys() - dct2.keys()'

  'create a dictionary of items common to two dictionaries':
    'prefix': 'dct - items common to two dictionaries'
    'body': 'common_items = dict(dct1.items() & dct2.items())'

  'create set of values common to two sets':
    'prefix': 'set_items_common_to_two_sets'
    'body': '''
    set1 = {'apples', 'oranges', 'bananas'} # fruits as placeholder values
    set2 = {'bananas', 'tangerines', 'lemons'}\n
    intersection_set = set2.intersection(set1)
    '''

  'turn a list of tuples into dictionary':
    'prefix': 'tuples to dict'
    'body': '''
    def tuple_to_dct():
        """
        Create a dictionary from a list of tuples, making the first elements the
        keys and the second elements the values.
        """
        for x, y in lst:
            dct.setdefault(x, []).append(y)

        return dct
    '''

  'print return':
    'prefix': 'print'
    'body': 'print(RTN())'

  'string to date':
    'prefix': 'str - convert string to date'
    'body': '''
    from datetime import datetime

    def convert_string_to_date(a):

        date_time = a
        date_strptime = datetime.strptime(date_time, '%Y-%m-%d %H:%M')
        return date_strptime.date()
    '''

  'yesterday YYYY-MM-DD':
    'prefix': 'dates - get yesterday\'s date'
    'body': '''
    from datetime import (datetime,
                          timedelta)

    def get_yesterdays_date():
        return str(datetime.strftime(datetime.now() - timedelta(1), '%Y-%m-%d'))
    '''

  'today: YYYY-MM-DD':
    'prefix': 'dates - today YYYY-MM-DD'
    'body': '''
    from datetime import date

    today = date.today() # yields today's date in YYYY-MM-DD format
    '''

  'today: Day, Month date, YYYY':
    'prefix': 'dates - today Month date, YYYY'
    'body': '''
    from datetime import (date,
                          datetime)

    def format_date_as_day_month_day_year(a):
        """Format date as '%A, %B %d, %Y'."""

        return datetime.strftime(a, '%A, %B %d, %Y')
    '''

  'format string as datetime object in YYYY-MM-DD format':
    'prefix': 'dates - datetime format'
    'body': '''
    from datetime import datetime

    def format_string_as_date(a, b):
        return datetime.strptime(a, b).date()
    '''

  'get difference between two dates in minutes':
    'prefix': 'dates - diff minutes'
    'body': '''
    from datetime import datetime

    def diff_dates_minutes(a, b):
        """Get the differece in minutes between two datetime objects."""

        fmt = '%Y-%m-%d %H:%M:%S'
        date_1 = datetime.strptime(a, fmt)
        date_2 = datetime.strptime(b, fmt)
        diff = date_2 - date_1

        return '{:.2f}'.format((diff.days * 24 * 60) + (diff.seconds/60))
    '''

  'get the difference between two dates in days':
    'prefix': 'dates - diff days'
    'body': '''
    from datetime import (datetime,
                          date)

    def diff_days_from_today(a):

        today = date.today()
        delta = today - a
        if delta.days > 0:
            return str(delta.days) + ' ago'
        else:
            return str(delta.days * -1) + ' from now'
    '''

  'get the difference between two dates in weeks':
    'prefix': 'dates - diff weeks'
    'body': '''
    import datetime
    from datetime import date

    # calculate how between a given date and today
    today = date.today()
    a_date = date(2019, 1, 1) # replace with whatever date you're working with
    delta = today - a_date
    weeks_between = delta.days / 7

    print(a_date)
    print(int(weeks_between))
    '''

  'convert a string in hours:minutes:seconds format to decimal hours':
    'prefix': 'times - convert to decimal hours'
    'body': '''
    def convert_hours_minutes_seconds_to_decimal(a):
        lst = a.split(":")
        hours_in_seconds = int(lst[0]) * 3600
        minutes_in_seconds = int(lst[1]) * 60
        seconds = int(lst[2])
        total_time = hours_in_seconds + minutes_in_seconds + seconds
        return str(total_time / 60) + " hours"
    '''

  'test to see if user input is in YYYY-MM-DD format':
    'prefix': 'user input - validate YYYY-MM-DD format'
    'body': '''
    import pyinputplus as pyip

    def prompt_user_for_date():
        return pyip.inputDate(formats=["%Y-%m-%d"])
    '''

  'timestamp to string':
    'prefix': 'timestamp - format timestamp as a string'
    'body': '''
    import time
    from datetime import datetime

    def format_timestamp_as_a_string():

        timestamp = time.time()
        return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d_%H-%M-%S')
    '''

  'format unix timestamp as a string':
    'prefix': 'timestamp - unix'
    'body': '''
    import datetime
    import time
    unix_timestamp = time.time()
    timestamp_str = datetime.datetime.fromtimestamp(unix_timestamp).strftime(
                                                    "%Y-%m-%d %H:%M:%S")
    '''

  'open csv':
    'prefix': 'csv - open with named tuples'
    'body': '''
    import csv
    from collections import namedtuple

    def open_csv_and_populate_dct(file_name):

        dct = {}

        with open(file_name) as csv_file:
            f_csv = csv.reader(csv_file)
            headings = next(f_csv)
            assembled_tuple = namedtuple("assembled_tuple", headings)
            for detail in f_csv:
                row = assembled_tuple(*detail)
                dct[row.key] = row.value # replace 'key' and 'value' with header names

        return dct
    '''

  'open csv with DictReader':
    'prefix': 'csv - open DictReader'
    'body': '''
    import csv

    def open_csv_pop_dct(file_name, k, v): # rename 'k' and 'v' to make them meaningful

        dct = {}

        with open(file_name, newline='') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                dct[row[k]] = row[v]

        return dct
    '''

  'open csv edit headers':
    'prefix': 'csv - open edit headers'
    'body': '''
    from collections import namedtuple
    import csv
    import re

    def open_csv_and_edit_headers():
        with open("file.csv") as f: # replace "file_name.csv" with  actual file name
            f_csv = csv.reader(f)
            headers = [re.sub('[^a-zA-Z_]', '_', h) for h in next(f_csv)]
            assembled_tuple = namedtuple('assembled_tuple', headers)
            for r in f_csv:
                row = assembled_tuple(*r)
                # process row
    '''

  'open csv with csv.reader':
    'prefix': 'csv - csv.reader'
    'body': '''
    import csv

    def open_csv_with_csvreader():
        with open("file.csv", newline="") as csvfile:
            csv_reader = csv.reader(csvfile, delimiter=" ", quotechar="|")
            headings = next(csv_reader)
            for row in csv_reader:
                # process row
    '''

  'json read':
    'prefix': 'read json data'
    'body': '''
    def read_json(a):
        """Read JSON data."""

        with open(a) as f:
            return json.load(f)
    '''

  'json write':
    'prefix': 'write json data'
    'body': '''
    def write_json(a, b):
        """Write JSON data."""

        with open(a, 'w') as f:
        json.dump(b, f)
    '''

  'open csv with pandas':
    'prefix': 'csv - open with pandas'
    'body': '''
    import pandas as pd

    df = pd.read_csv(\'data.csv\', index_col=0) # 'data.csv' is a placeholder
    '''

  'write dictionary to csv':
    'prefix': 'csv - write dictionary to csv'
    'body': '''
    import csv

    def write_dct_to_csv(file, dct, headers):

        with open(file, "w") as out_file:
            out_csv = csv.writer(out_file)
            out_csv.writerow(headers)
            for k, v in dct.items():
                keys_values = (k, v) # rename keys and values to make to make them meaningful
                out_csv.writerow(keys_values)

        print(f'"{file}" exported successfully')
    '''

  'write list to csv':
    'prefix': 'csv - write list to csv'
    'body': '''
    import csv

    def write_lst_to_csv(file, lst, header):

        with open(file, 'w') as out_file:
            out_csv = csv.writer(out_file)
            out_csv.writerow(header)
            for i in LST: # rename i to make it meaningful
                out_csv.writerow([i])

            print(f'"{file}" exported successfully')
    '''

  'switch function':
    'prefix': 'switch'
    'body': '''
    def switch_case(argument):
        switcher = {
            'a': 'option_1',
            'b': 'option_2',
            'c': 'option_3',
            }
        return switcher.get(argument, 'nothing')
    '''

  'write to text file':
    'prefix': 'text file'
    'body': '''
    def write_to_a_text_file():
        FILE = open('file_name.txt', 'w') # replace 'file_name.txt'

        for item in lst:
            FILE.write(item)
    '''

  'generate a list of random numbers':
    'prefix': 'lst - random'
    'body': '''
    import random

    def generate_list_of_random_numbers():
        return random.sample(range(1, 100), 3) # adapt range and number of random numbers to be generated based on the needs of your app
    '''

  'search for strings containing a specified string':
    'prefix': 'search'
    'body': '''
    domain = 'dundermifflin.com'
    email = 'dwight@dundermifflin.com'
    if 'dundermifflin.com' in email:
        print(f'contains {domain}')
    else:
        print(f'does not contain {domain}')
    '''

  'find phone number in a string':
    'prefix': 'regex - find phone number'
    'body': '''
    import re

    def find_phone_number():

        phone_num_regex = re.compile(r'\\\\d{3}-\\\\d{3}-\\\\d{4}')
        mo = phone_num_regex.search('My number is 212-555-1212.')
        print('Phone number found: ' + mo.group())
    '''

  'validate phone number format':
    'prefix': 'regex - validate phone number format'
    'body': '''
    def phone_number_regex(phone_number):
        """Test to ensure phone_number is entered in xxx-xxx-xxxx format."""
        regex = '\d{3}-\d{3}-\d{4}'
        if re.search(regex, phone_number):
            return True
        else:
            return False
    '''

  'find date in a string':
    'prefix': 'regex - find date in YYYY-MM-DD format'
    'body': '''

    import re

    def find_date():
        """Find date in a string."""

        date_num_regex = re.compile(r'\\\\d{4}-\\\\d{2}-\\\\\d{2}')
        mo = date_num_regex.search('I was born on 1989-01-22.')
        print('Date found: ' + mo.group())
    '''

  'get display name, domain from an email address':
    'prefix': 'str - split display name, domain'
    'body': '''
    def get_email_prefix_and_domain(email):
        display_name, domain = email.split("@")
        return display_name, domain
    '''

  'split string':
    'prefix': 'str - split'
    'body': '''
    def split_string(a):
        return str.split(a)
    '''

  'prompt user for the number of most frequently occurring items they\'d like \
  to see':
    'prefix': 'user input - prompt for a number'
    'body': '''
    import pyinputplus as pyip

    def prompt_user_for_number():
        """
        Prompt user for the number of most frequently occurring items
        they'd like to see, validating that they input an integer.
        """

        print("Enter the number of most frequently occurring items you'd like "
              "to see.")
        return pyip.inputInt(prompt="> ")
    '''

  'validate that the user entered an integer':
    'prefix': 'user input - validate integer'
    'body': '''
    import pyinputplus as pyip

    print('How many ice cream sandwiches would you like?')
    response = pyip.inputInt('> ')
    '''

  'format a number as a float':
    'prefix': 'number - format float'
    'body': '''
    num = 22/7 # set num to any value you want
    num = float(num)
    print('{0:.2f}'.format(num))
    '''

  'format to include thousands separator':
    'prefix': 'number - format thousands separator'
    'body': '''
    num = 1234.567 # replace 1234.567
    num_fmt = format(x,  '0,.1f')
    print(num_fmt)
    '''

  'format as a percentage':
    'prefix': 'number - format percentage'
    'body': '''
    def format_percentage(num, total):
        """Format percentage to the second decimal place."""
        perc = num / total
        return '{:.2%}'.format(perc)
    '''

  'count occurrences of a word in a list':
    'prefix': 'word counter'
    'body': '''
    from collections import Counter

    words = [] # populate list
    word_counts = Counter(words)
    words_counts = word_counts.most_common() # include an integer in the most_common function to specify the number of results

    for word in words_counts:
    \    print(f'{word[0]} - {word[1]}')
    '''

  'list files of a certain type in a directory':
    'prefix': 'files - list files of a certain type in a directory'
    'body': '''
    import os

    files = [file for file in os.listdir() if file.endswith('.py')] # replace '.py' with selected file type

    for i in files:
        print(i)
    '''

  'check to see if directories exist based on user input':
    'prefix': 'directories - test for existence'
    'body': '''
    import os


    def build_lists_of_directories(lst1):
        lst2 = []
        lst3 = []
        for directory in lst1:
            if os.path.exists(directory) == True:
                lst2.append(directory)
            else:
                lst3.append(directory)

        return lst2, lst3


    def output_directories(header, lst):
        print(header)
        for i in lst:
            print(i)


    def output_singular_or_plural(singular_header, plural_header, lst):
        if lst:
            if len(lst) > 1:
                output_directories(singular_header, lst)
            else:
                output_directories(plural_header, lst)


    def prompt_user_for_directories():
        lst = []
        while True:
            print("\\\\nEnter the names of directories or nothing to quit.")
            directory = input("> ")
            if directory == "":
                break
            lst = lst + [directory]

        return lst


    directories = prompt_user_for_directories()
    existent_directories, nonexistent_directories = \\\\
    build_lists_of_directories(directories)

    output_singular_or_plural("\\\\nThe following directories exist",
                              "\\\\nThe following directory exists",
                              existent_directories)
    output_singular_or_plural("\\\\nThe following directories do not exist",
                              "\\\\nThe following directory does not exist",
                              nonexistent_directories)
    '''

  'make directory':
    'prefix': 'directories - make directory'
    'body': '''
    import os

    def make_directory(a):
        os.makedirs(a)
    '''

  'string starts with':
    'prefix': 'str - startswith'
    'body': 'text.startswith(\'foo\') # replace \'text\' and \'foo\''

  'string ends with':
    'prefix': 'str - endswith'
    'body': 'text.endswith(\'foo\') # replace \'text\' and \'foo\''

  'all elements in a list':
    'prefix': 'lst - all'
    'body': 'all(lst) # replace lst'

  'any element in a list':
    'prefix': 'lst - any'
    'body': 'any(lst) # replace lst'

  'find highest value in a list':
    'prefix': 'lst - max'
    'body': 'max(lst) # replace lst'

  'find lowest value in a list':
    'prefix': 'lst - min'
    'body': 'min(lst) # replace lst'

  'range of a list':
    'prefix': 'range'
    'body': '''
    def find_range(lst):
        return min(lst), max(lst) # replace lst'
    '''

  'get mean from a list of numbers':
    'prefix': 'mean'
    'body': '''
    import statistics

    statistics.mean([])
    '''

  'get median from a list of numbers':
    'prefix': 'median'
    'body': '''
    import statistics

    statistics.median([])
    '''

  'get mode from a list of numbers':
    'prefix': 'mode'
    'body': '''
    import statistics

    statistics.mode([])
    '''

  'get standard deviation':
    'prefix': 'standard deviation'
    'body': '''
    import statistics

    statistics.stdev([])
    '''

  'validate that user entered an email address':
    'prefix': 'user input - email address'
    'body': '''
    import pyinputplus as pyip

    print('input an eamil address')
    email = pyip.inputEmail('> ')
    '''

  'validate that user entered yes or no':
    'prefix': 'user input - yes or no'
    'body': '''
    import pyinputplus as pyip

    print('yes or no')
    usr_choice = pyip.inputYesNo()
    '''

  'present user with numbered choices':
    'prefix': 'user input - numbered choices'
    'body': '''
    import pyinputplus as pyip

    lst = [
        'Gene',
        'Paul',
        'Peter',
        'Ace',
    ]

    usr_choice = pyip.inputMenu(lst, numbered=True)
    print(usr_choice)
    '''

  'present user with a menu - imports':
    'prefix': 'menu - imports'
    'body': '''
    import pyinputplus as pyip
    import importlib


    def menu(argument):
        """Switch case statement."""

        return choices_enum.get(argument, 'nothing')


    choices = [
        'file_1',
        'file_2',
        'file_3',
    ]

    choices_enum = {}

    print("\\\\nplease select from the choices below")
    for num, choice in enumerate(choices, 1):
        print(f"{num}. {choice}")
        choices_enum[num] = choice

    choice = pyip.inputInt("\\\\n> ")
    importlib.import_module(menu(choice))
    '''

  'present user with a menu - functions':
    'prefix': 'menu - functions'
    'body': '''
    import pyinputplus as pyip


    def menu():
        def func_1():
            print("func 1")


        def func_2():
            print("func 2")


        def func_3():
            print("func 3")


        functions_map = {
            1: func_1,
            2: func_2,
            3: func_3
        }

        print("\\\\nplease select an option below or nothing to exit\\\\n")
        for num, action in functions_map.items():
            print(num, action.__name__)
        usr_choice = pyip.inputInt("> ", min=1, blank=True)
        functions_map[usr_choice]()

    menu()
    '''

  'list buckets':
    'prefix': 'boto3 - s3'
    'body': '''
    import boto3

    s3 = boto3.client('s3')
    response = s3.list_buckets()

    print("\\\\nS3 buckets")
    for num, bucket in enumerate(response['Buckets'], 1):
        print(f"{num}. {bucket['Name']}")
    print("\\\\n")
    '''

  'create ec2 instance':
    'prefix': 'boto3 - ec2'
    'body': '''
    import os
    import boto3

    AMI = os.environ['AMI']
    INSTANCE_TYPE = os.environ['INSTANCE_TYPE']
    KEY_NAME = os.environ['KEY_NAME']
    SUBNET_ID = os.environ['SUBNET_ID']

    ec2 = boto3.resource('ec2')

    def lambda_handler(event, context):

        instance = ec2.create_instances(
            ImageId=AMI,
            InstanceType=INSTANCE_TYPE,
            KeyName=KEY_NAME,
            SubnetId=SUBNET_ID,
            MaxCount=1,
            MinCount=1
        )

        print("New instance created:", instance[0].id)

    '''

'.source.html':
  'html for w3 js exercises':
    'prefix': 'html_w3'
    'body': '''
    <!DOCTYPE html>
    <html lang="${1:en}" dir="${2:ltr}">
    \t<head>
    \t\t<meta charset="utf-8">
    \t\t<title>$3</title>
    \t</head>
    \t<body>
    \t\t$4<h2>JavaScript</h2>
    \t\t<p></p>
    \t\t<script>
    \t\t</script>
    \t</body>
    </html>
    '''

'.text.plain':
  'create AWS instance':
    'prefix': 'aws create ec2 instance'
    'body' : '''
    # replace 'xxx' with relevant values

    aws ec2 run-instances \\\\
    --image-id ami-xxx \\\\
    --count 1 \\\\
    --instance-type t2.micro \\\\
    --key-name xxx \\\\
    --security-group-ids sg-xxx \\\\
    --subnet-id subnet-xxx \\\\
    --user-data xxx.sh \\\\
    --tag-specifications \\\\
    'ResourceType=instance,Tags=[{Key=xxx,Value=xxx}]'
    'ResourceType=volume,Tags=[{Key=xxx,Value=xxx}]'
    '''

  'create vpc':
    'prefix': 'aws create vpc'
    'body': 'aws ec2 create-vpc --cidr-block {172.16.0.0/16}'

  'output table of amis':
    'prefix': 'aws output table of amis'
    'body': '''
    aws --output table ec2 describe-images \\\\
    --filters "Name=description,Values=*Amazon Linux 2*" \\\\
    "Name=owner-alias,Values=amazon"
    '''

  'copy a file to s3':
    'prefix': 'aws s3 copy file'
    'body': 'aws s3 cp {filename} {bucket}'

  'create a presigned url':
    'prefix': 'aws s3 presigned'
    'body': '''
    aws s3 presign s3://{my_bucket_name/private_object} \\\\
    --expires-in 600
    '''

  'create a dynamodb table':
    'prefix': 'aws create a dynamodb table'
    'body': '''
    aws dynamodb create-table \\\\
    --table-name {table name} \\\\
    --attribute-definitions \\\\
    AttributeName={attribute},AttributeType=S \\\\
    AttributeName={attribute},AttributeType=S \\\\
    --key-schema AttributeName={attribute},KeyType=HASH \\\\
    AttributeName={attribute},KeyType=RANGE \\\\
    --provisioned-throughput \\\\
    ReadCapacityUnits=1,WriteCapacityUnits=1
    '''
