'.source.python':
  'doc string':
    'prefix': 'doc_string'
    'body': '""" __doc__ """'

  'create list':
    'prefix': 'lst'
    'body': 'lst = []'

  'import csv':
    'prefix': 'import_csv'
    'body': 'import csv'

  'import random':
    'prefix': 'import_random'
    'body': 'import random'

  'import re':
    'prefix': 'import_re'
    'body': 'import re'

  'namedtuple':
    'prefix': 'namedtuple'
    'body': 'from collections import namedtuple'

  'create dictionary':
    'prefix': 'dct'
    'body': 'dct = {} # make dictinary name meaningful'

  'create for loop':
    'prefix': 'for_loop'
    'body': '''
    for x in lst: # rename variable to make it meaningful
        # process row
    '''

  'in list':
    'prefix': 'if_in'
    'body': '''
    if x in: # rename variable to make it meaningful
        # process row
    '''

  'remove @ and everything after':
    'prefix': 'remove_@'
    'body': '''
    for item in LST:
        print(item[:item.find("@")])
    '''

  'not in list':
    'prefix': 'if_not_in'
    'body': '''
    if not in x:
        # process row
    '''

  'loop through items in dictionary':
    'prefix': 'for_k_v'
    'body': '''
    for k, v in dct.items(): # rename keys and values to make them meaningful
        # process row
    '''

  'merge dictionaries':
    'prefix': 'merge_dictionaries'
    'body': 'dct3 = {**dct1, **dct2}'

  'get differences between two dictionaries':
    'prefix': 'get_diff_set'
    'body': 'DIFF = set(DCT1.items()) ^ set(DCT2.items())'

  'sort dictinary by keys':
    'prefix': 'sort_dct_keys'
    'body': '''
    for k, v in sorted(dct.items()): # rename keys and values to make them meaningful
        # process rows
    '''

  'find values in two sets that intersect':
    'prefix': 'intersection'
    'body': '''
    set1 = {"apples", "oranges", "bananas"} # fruits as placeholder values
    set2 = {'bananas', 'tangerines', 'lemons'}\n
    intersection_set = set2.intersection(set1)
    '''

  'return lambda':
    'prefix': 'return'
    'body': 'RTN = lambda: "\\\\n"'

  'from datetime import date':
    'prefix': 'from_datetime'
    'body': 'from datetime import date'

  'get today':
    'prefix': 'today'
    'body': '''
    from datetime import date\n
    today = date.today()
    '''

  'open csv':
    'prefix': 'open_csv'
    'body': '''
    import csv
    from collections import namedtuple\n
    def open_csv(file, dct):
    \    """ open csv and populate a dictionary with its contents """
    \    with open(file) as csv_file:
    \        F_CSV = csv.reader(csv_file)
    \        COLUMN_HEADINGS = next(F_CSV)
    \        CSV_ROW = namedtuple(\'Row\', COLUMN_HEADINGS)
    \        for rows in F_CSV:
    \            row = CSV_ROW(*rows)
    \            dct[row.term] = row.definition
    '''

  'open csv and edit headers':
    'prefix': 'open_csv_edit_headers'
    'body': '''
    with open(file) as f: # replace "file" with file name
    \    F_CSV = csv.reader(f)
    \    HEADERS = [re.sub('[^a-zA-Z_]', '_', h) for h in next(F_CSV)]
    \    ROW = namedtuple('Row', HEADERS)
    \    for r in F_CSV:
    \        row = ROW(*r)
    \        # process row
    '''

  'switch function':
    'prefix': 'switch_function'
    'body': '''
    def switch_case(argument):
        """ switch case statement """
        switcher = {
            "a": "option_1",
            "b": "option_2",
            "c": "option_3",
            }
        return switcher.get(argument, "nothing")
    '''

  'write to csv':
    'prefix': 'write_to_csv_function'
    'body': '''
    import csv\n
    def write_to_csv(name_of_file, dct):
    \    """ write dictionary to csv """
    \    with open(name_of_file, "w") as out_file:
    \        out_csv = csv.writer(out_file)
    \        out_csv.writerow(HEADERS) # define HEADERS before running function
    \        for k, v in dct.items(): # rename keys and values to make to make them meaningful
    \            keys_values = (k, v)
    \            out_csv.writerow(keys_values)
    '''

  'print list':
    'prefix': 'print_lst'
    'body': '''
    for item in lst:
        print(item)
    '''

  'write to text file':
    'prefix': 'write_to_txt'
    'body': '''
    FILE = open("file.txt", "w")\n
    for item in lst:
        FILE.write(item)
    '''

  'generate list of random numbers':
    'prefix': 'list_of_random_numbers'
    'body': '''
    import random\n
    random_numbers_lst = random.sample(range(1, 100), 3) # adapt range and number of random numbers to be generated based on the needs of your app
    '''

  'search for strings containing a specified string':
    'prefix': 'search'
    'body': 'result = re.search("dundermifflin.com", email) # replace "dundermifflin.com"'

  'validate email addresses':
    'prefix': 'validate_email_addresses'
    'body': '''
    for email in LST: # rename LST to something meaningful
    \    match = re.search(r'[\w.-]+@[\w.-]+', email)
    \    if match:
    \        print("valid")
    \    else:
    \        print("invalid")
    '''

  'check user input':
    'prefix': 'check_user_input'
    'body': '''
    while True:
        try:
            NUMBER_OF_GUESTS = int(input("How many ice cream sandwiches would "
                                         "you like? ")) # replace "ice cream sandwiches"
            if NUMBER_OF_GUESTS > 12: # replace "12"
                print("please enter a number less than or equal to twelve ")
            else:
                break
        except ValueError:
            print("Please enter an integer.")
    '''
