'.source.python':
  'doc string':
    'prefix': 'doc_string'
    'body': '""" __doc__ """'

  'import csv':
    'prefix': 'import_csv'
    'body': 'import csv'

  'import namedtuple':
    'prefix': 'import_namedtuple'
    'body': 'from collections import namedtuple'

  'import random':
    'prefix': 'import_random'
    'body': 'import random'

  'import re':
    'prefix': 'import_re'
    'body': 'import re'

  'from datetime import date':
    'prefix': 'from_datetime'
    'body': 'from datetime import date'

  'for loop list':
    'prefix': 'for_loop_lst'
    'body': '''
    for x in lst: # rename variable to make it meaningful
        # process row
    '''

  'for loop through multiple lists':
    'prefix': 'for_loop_multiple_lists'
    'body': '''
    for item1, item2 in zip(lst1, lst2):
        # process row
    '''

  'create list':
    'prefix': 'lst'
    'body': 'lst = []'

  'create test list':
    'prefix': 'test_lst'
    'body': '''
    lst = [
      \  'Gene',
      \  'Paul',
      \  'Peter',
      \  'Ace',
    ]
    '''

  'create dictionary':
    'prefix': 'dct'
    'body': 'dct = {} # make dictinary name meaningful'

  'create test dictionary':
    'prefix': 'test_dct'
    'body': '''
    dct = {
      \  'Gene': 'bass',
      \  'Paul': 'guitar',
      \  'Peter': 'drums',
      \  'Ace': 'lead guitar',
    }
    '''

  'for loop enumerated dictionary':
    'prefix': 'for_loop_enumerate_dct'
    'body': '''
    for i, item in enumerate(my_items):
        print(f"{i}: {item}")
    '''

  'for loop indexed':
    'prefix': 'for_loop_indexed'
    'body': '''
    for i in range(a, n, s): # a - start, n - stop, s - step
        # process i
    '''

  'if in list':
    'prefix': 'if_in'
    'body': '''
    if x in: # rename variable to make it meaningful
        # process row
    '''

  'if not in list':
    'prefix': 'if_not_in'
    'body': '''
    if not in x:
        # process row
    '''

  'for loop dictionary':
    'prefix': 'for_loop_dct'
    'body': '''
    for k, v in dct.items(): # rename dct, keys, and values to make them meaningful
        # process row
    '''

  'remove @ and everything after':
    'prefix': 'remove_@'
    'body': '''
    for item in LST:
        print(item[:item.find("@")])
    '''

  'sort dictionary by keys':
    'prefix': 'sort_dct_by_values'
    'body': '''
    for k, v in sorted(dct.items()): # rename keys and values to make them meaningful
        # process row
    '''

  'sort dictionary by values':
    'prefix': 'sort_dct_by_values'
    'body': '''
    for k, v in sorted(dct.items(), key=lambda x: x[1], reverse=True): # rename keys and values to make them meaningful
        # process row
    '''

  'merge dictionaries':
    'prefix': 'merge_dictionaries'
    'body': 'dct3 = {**dct1, **dct2}'

  'get differences between two dictionaries':
    'prefix': 'set_get_diff'
    'body': 'DIFF = set(DCT1.items()) ^ set(DCT2.items())'

  'create a dictionary of items common to two dictionaries':
    'prefix': 'common_items_dct'
    'body': 'common_items = dict(dct_a.items() & dct_b.items())'

  'find values in two sets that intersect':
    'prefix': 'intersection'
    'body': '''
    set1 = {"apples", "oranges", "bananas"} # fruits as placeholder values
    set2 = {'bananas', 'tangerines', 'lemons'}\n
    intersection_set = set2.intersection(set1)
    '''

  'return lambda':
    'prefix': 'return'
    'body': 'RTN = lambda: "\\\\n"'

  'get today':
    'prefix': 'today'
    'body': '''
    from datetime import date\n
    today = date.today()
    '''

  'format today':
    'prefix': 'format_today'
    'body': '''
    from datetime import date
    from datetime import datetime

    today = date.today()
    today_formatted = datetime.strftime(today, '%A %B %d, %Y')
    print(today_formatted)
    '''

  'format datetime':
    'prefix': 'format_datetime'
    'body': '''
    from datetime import datetime

    date = '9/27/19 17:01'
    date_strptime = datetime.strptime(date, '%m/%d/%y %H:%M')
    date_formatted = date_strptime.strftime('%Y-%m-%d')

    print(date_formatted)
    '''

  'format date':
    'prefix': 'format_date'
    'body': '''
    from datetime import datetime

    date = datetime.strptime('2019-09-27', '%Y-%m-%d') # '2019-09-27 is a placeholder'
    print(date.date())
    '''

  'diff two dates minutes':
    'prefix': 'diff_two_dates_minutes'
    'body': '''
    from datetime import datetime

    FMT = '%Y-%m-%d %H:%M:%S'
    D1 = datetime.strptime('2019-01-01 10:39:30', FMT)
    D2 = datetime.strptime('2019-01-02 10:39:00', FMT)

    DIFF = D2 - D1
    DIFF_MINUTES = (DIFF.days * 24 * 60) + (DIFF.seconds/60)
    print("{:.2f}".format(DIFF_MINUTES))
    '''

  'csv - open':
    'prefix': 'csv_open'
    'body': '''
    import csv
    from collections import namedtuple\n
    dct = {}\n
    def open_csv(file, dct):
    \    """ open csv and populate a dictionary with its contents """
    \    with open(file) as csv_file:
    \        F_CSV = csv.reader(csv_file)
    \        COLUMN_HEADINGS = next(F_CSV)
    \        CSV_ROW = namedtuple(\'Row\', COLUMN_HEADINGS)
    \        for rows in F_CSV:
    \            row = CSV_ROW(*rows)
    \            dct[row.key] = row.value
    '''

  'csv - open and edit headers':
    'prefix': 'csv_open_edit_headers'
    'body': '''
    with open(file) as f: # replace "file" with file name
    \    F_CSV = csv.reader(f)
    \    HEADERS = [re.sub('[^a-zA-Z_]', '_', h) for h in next(F_CSV)]
    \    ROW = namedtuple('Row', HEADERS)
    \    for r in F_CSV:
    \        row = ROW(*r)
    \        # process row
    '''

  'csv - write':
    'prefix': 'csv_write'
    'body': '''
    import csv\n
    HEADERS = # name headers\n
    def write_to_csv(name_of_file, dct):
    \    """ write dictionary to csv """
    \    with open(name_of_file, "w") as out_file:
    \        out_csv = csv.writer(out_file)
    \        out_csv.writerow(HEADERS) # define HEADERS before running function
    \        for k, v in dct.items(): # rename keys and values to make to make them meaningful
    \            keys_values = (k, v)
    \            out_csv.writerow(keys_values)
    '''

  'switch function':
    'prefix': 'switch_function'
    'body': '''
    def switch_case(argument):
        """ switch case statement """
        switcher = {
            "a": "option_1",
            "b": "option_2",
            "c": "option_3",
            }
        return switcher.get(argument, "nothing")
    '''

  'write to text file':
    'prefix': 'write_to_txt'
    'body': '''
    FILE = open("file.txt", "w")\n
    for item in lst:
        FILE.write(item)
    '''

  'generate list of random numbers':
    'prefix': 'list_of_random_numbers'
    'body': '''
    import random\n
    random_numbers_lst = random.sample(range(1, 100), 3) # adapt range and number of random numbers to be generated based on the needs of your app
    '''

  'search for strings containing a specified string':
    'prefix': 'search'
    'body': 'result = re.search("dundermifflin.com", email) # replace "dundermifflin.com"'

  'validate email addresses':
    'prefix': 'validate_email_addresses'
    'body': '''
    for email in lst: # rename lst to something meaningful
    \    match = re.search(r'[\w.-]+@[\w.-]+', email)
    \    if match:
    \        print("valid")
    \    else:
    \        print("invalid")
    '''

  'check user input':
    'prefix': 'check_user_input'
    'body': '''
    while True:
        try:
            NUMBER_OF_GUESTS = int(input("How many ice cream sandwiches would "
                                         "you like? ")) # replace "ice cream sandwiches"
            if NUMBER_OF_GUESTS > 12: # replace "12"
                print("please enter a number less than or equal to twelve ")
            else:
                break
        except ValueError:
            print("Please enter an integer.")
    '''

  'get the difference between two dates':
    'prefix': 'diff_two_dates'
    'body': '''
    import datetime
    from datetime import date

    # calculate how between a given date and today
    TODAY = date.today()
    A_DATE = date(2020, 3, 17) # replace with whatever date you're working with
    DELTA = A_DATE - TODAY
    DAYS_BETWEEN = DELTA.days

    print(A_DATE)
    print(DAYS_BETWEEN)
    '''

  'format float':
    'prefix': 'format_float'
    'body': '''
    num = 22/7 # set num to any value you want
    num = float(num)
    print('{0:.2f}'.format(num))
    '''

  'word counter':
    'prefix': 'word_counter'
    'body': '''
    from collections import Counter
    word_counts = Counter(words)
    words_counts = word_counts.most_common()
    for word in words_counts:
    \    print(f"{word[0]}\t{word[1]}")
    '''

'.source.html':
  'html for w3 js exercises':
    'prefix': 'html_w3'
    'body': '''
    <!DOCTYPE html>
    <html lang="${1:en}" dir="${2:ltr}">
    \t<head>
    \t\t<meta charset="utf-8">
    \t\t<title>$3</title>
    \t</head>

    \t<body>
    \t\t$4<h2>JavaScript</h2>
    \t\t<p></p>
    \t\t<script>
    \t\t</script>

    \t</body>
    </html>
    '''

'.text.plain':
  'create AWS instance':
    'prefix': 'create_aws_instance'
    'body' : '''
    # occurrences of 'xxx' are placeholders
    # replace with relevant values
    \\
    aws ec2 run-instances \\
    --image-id ami-xxx \\
    --count 1 \\
    --instance-type t2.micro \\
    --key-name xxx \\
    --security-group-ids sg-xxx \\
    --subnet-id subnet-xxx \\
    --user-data xxx.sh \\
    --tag-specifications \\
    'ResourceType=instance,Tags=[{Key=xxx,Value=xxx}]'
    'ResourceType=volume,Tags=[{Key=xxx,Value=xxx}]'
    '''
